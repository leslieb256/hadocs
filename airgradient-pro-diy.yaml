#AirGradient Pro v4.2 DIY edition
#

substitutions:
  id: "1"
  devicename: "airgradient-pro"
  upper_devicename: "AirGradient Pro"

esphome:
  name: "${devicename}-${id}"
  friendly_name: "${upper_devicename} ${id}"
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  # name_add_mac_suffix: true
  platform: ESP8266
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API (API password is deprecated in favor of encryption key)
# https://esphome.io/components/api.html
api:
  encryption:
    key: !secret home_assistant_encryption_key

ota:
  password: !secret ota_password

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  reboot_timeout: 15min

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${upper_devicename} Fallback Hotspot"
    password: !secret fallback_ssid_password

# Used to support POST request to send data to AirGradient
# https://esphome.io/components/http_request.html
http_request:

# Creates a simple web server on the node that can be accessed through any browser
# https://esphome.io/components/web_server.html
web_server:
  port: 80
  include_internal: true

# https://esphome.io/components/captive_portal.html
# The captive portal is a fallback mechanism for when connecting to the configured WiFi fails.
captive_portal:

# Create a switch for safe_mode in order to flash the device
# Solution from this thread:
# https://community.home-assistant.io/t/esphome-flashing-over-wifi-does-not-work/357352/1
switch:
  - platform: safe_mode
    name: "Flash Mode (Safe Mode)"
    icon: "mdi:cellphone-arrow-down"

i2c:
  sda: D2
  scl: D1

font:
  - file: "fonts/ProductSansRegular.ttf"
    id: product
    size: 42
    glyphs: |
      0123456789 .na
  - file: "fonts/Roboto-Light.ttf"
    id: unit
    size: 16
    glyphs: |
      !"%°RHFCind40 pmgµ³/
  - file: "fonts/Roboto-Light.ttf"
    id: label
    size: 11
    glyphs: |
      HTVOPCD abcdeilmnoprstuxy
  - file: "fonts/MaterialDesignIcons.ttf"
    id: icon
    size: 38
    glyphs: [
      "󰟤", #CO2
      "󰽕", #home thermometer outline
      "󰖎", #water percent
      "󰄻", #chemical-weapon
      "󰐸", #radiator
    ]

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    # rotation: "180°"
    id: main_screen
    pages:
      - id: page1
        lambda: |-
          it.printf(84, 72, id(product), TextAlign::BOTTOM_RIGHT, "%.1f", id(temp).state);
          it.printf(84, 64, id(unit), TextAlign::BOTTOM_LEFT, "°C");
          it.printf(128, 0, id(icon), TextAlign::TOP_RIGHT, "󰽕");
          it.printf(86, 12, id(label), TextAlign::TOP_RIGHT, "Temperature");
      - id: page2
        lambda: |-
          it.printf(84, 72, id(product), TextAlign::BOTTOM_RIGHT, "%.1f", id(humidity).state);
          it.printf(84, 64, id(unit), TextAlign::BOTTOM_LEFT, "%% RH");
          it.printf(128, 0, id(icon), TextAlign::TOP_RIGHT, "󰖎");
          it.printf(86, 12, id(label), TextAlign::TOP_RIGHT, "Humidity");
      - id: page3
        lambda: |-
          it.printf(84, 72, id(product), TextAlign::BOTTOM_RIGHT, "%.0f", id(co2).state);
          it.printf(84, 64, id(unit), TextAlign::BOTTOM_LEFT, "ppm");
          it.printf(128, 0, id(icon), TextAlign::TOP_RIGHT, "󰟤");
          it.printf(86, 12, id(label), TextAlign::TOP_RIGHT, "Carbon Dioxide");
      - id: page4
        lambda: |-
          it.printf(84, 72, id(product), TextAlign::BOTTOM_RIGHT, "%.0f", id(pm_2_5).state);
          it.printf(84, 64, id(unit), TextAlign::BOTTOM_LEFT, "µg/m³");
          it.printf(128, 0, id(icon), TextAlign::TOP_RIGHT, "󰄻");
          it.printf(86, 12, id(label), TextAlign::TOP_RIGHT, "Particulates");
      - id: page5
        lambda: |-
          it.printf(84, 72, id(product), TextAlign::BOTTOM_RIGHT, "%.0f", id(tvoc).state);
          it.printf(84, 64, id(unit), TextAlign::BOTTOM_LEFT, "ind40");
          it.printf(128, 0, id(icon), TextAlign::TOP_RIGHT, "󰐸");
          it.printf(86, 12, id(label), TextAlign::TOP_RIGHT, "tVOC");

interval:
  - interval: 8s
    then:
      - display.page.show_next: main_screen
      - component.update: main_screen

  - interval: 5min
    # Send data to AirGradient API server
    # for more details have a look at sendToServer() function:
    # https://www.airgradient.com/open-airgradient/blog/airgradient-diy-pro-instructions/
    then:
      - http_request.post:
          # AirGradient URL with the last 3 bytes of the MAC address in Hex format all lower case
          url: !lambda |-
            return "http://hw.airgradient.com/sensors/airgradient:" + get_mac_address().substr(6,11) + "/measures";
          headers:
              Content-Type: application/json
          # "!lambda return to_string(id(pm2).state);" Converts sensor output from double to string
          json:
            wifi: id(airgradient_wifi_signal).state
            pm01: !lambda return to_string(id(pm_1_0).state);
            pm02: !lambda return to_string(id(pm_2_5).state);
            pm10: !lambda return to_string(id(pm_10_0).state);
            pm003_count: !lambda return to_string(id(pm_0_3um).state);
            rco2: !lambda return to_string(id(co2).state);
            atmp: !lambda return to_string(id(temp).state);
            rhum: !lambda return to_string(id(humidity).state);
            tvoc: !lambda return to_string(id(tvoc).state);
          verify_ssl: false
uart:
  - rx_pin: D5
    tx_pin: D6
    baud_rate: 9600
    id: uart_1

  - rx_pin: D4
    tx_pin: D3
    baud_rate: 9600
    id: uart_2

sensor:
  - platform: sht3xd
    temperature:
      id: temp
      name: ${upper_devicename} Temperature
    humidity:
      id: humidity
      name: ${upper_devicename} Relative Humidity
    address: 0x44
    update_interval: 10s

  - platform: pmsx003
    type: PMSX003
    uart_id: uart_1
    pm_1_0:
      id: pm_1_0
      name: "${upper_devicename} Particulate Matter <1.0µm Concentration"
    pm_2_5:
      id: pm_2_5
      name: "${upper_devicename} Particulate Matter <2.5µm Concentration"
    pm_10_0:
      id: pm_10_0
      name: "${upper_devicename} Particulate Matter <10.0µm Concentration"
    pm_0_3um:
      id: pm_0_3um
      name: "${upper_devicename} Particulate Matter >0.3µm Count"
    pm_0_5um:
      id: pm_0_5um
      name: "${upper_devicename} Particulate Matter >0.5µm Count"
    pm_1_0um:
      id: pm_1_0um
      name: "${upper_devicename} Particulate Matter >1.0µm Count"
    pm_2_5um:
      id: pm_2_5um
      name: "${upper_devicename} Particulate Matter >2.5µm Count"
    # formaldehyde:
    #   id: hcho
    #   name: "{upper_devicename} Formaldehyde (HCHO) concentration in µg per cubic meter"
    update_interval: 3min # Sensor will go into sleep mode for extended operation lifetime

  - platform: senseair
    uart_id: uart_2
    co2:
      id: co2
      name: "${upper_devicename} SenseAir CO2 Value"
    update_interval: 60s

  # https://sensirion.com/products/catalog/SGP41/
  - platform: sgp4x
    voc:
      id: tvoc
      name: "VOC Index"
    nox:
      id: NOx
      name: "NOx Index"
    compensation:
      humidity_source: humidity
      temperature_source: temp

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: airgradient_wifi_signal
    update_interval: 60s

  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    update_interval: 60s
